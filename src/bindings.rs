// /* automatically generated by rust-bindgen 0.59.1 */

pub type __pid_t = ::std::os::raw::c_int;
pub type pid_t = __pid_t;
pub const trace_seq_fail_TRACE_SEQ__GOOD: trace_seq_fail = 0;
pub const trace_seq_fail_TRACE_SEQ__BUFFER_POISONED: trace_seq_fail = 1;
pub const trace_seq_fail_TRACE_SEQ__MEM_ALLOC_FAILED: trace_seq_fail = 2;
pub type trace_seq_fail = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_seq {
    pub buffer: *mut ::std::os::raw::c_char,
    pub buffer_size: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub readpos: ::std::os::raw::c_uint,
    pub state: trace_seq_fail,
}
#[test]
fn bindgen_test_layout_trace_seq() {
    assert_eq!(
        ::std::mem::size_of::<trace_seq>(),
        24usize,
        concat!("Size of: ", stringify!(trace_seq))
    );
    assert_eq!(
        ::std::mem::align_of::<trace_seq>(),
        8usize,
        concat!("Alignment of ", stringify!(trace_seq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trace_seq>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trace_seq),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trace_seq>())).buffer_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trace_seq),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trace_seq>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(trace_seq),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trace_seq>())).readpos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trace_seq),
            "::",
            stringify!(readpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trace_seq>())).state as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(trace_seq),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_record {
    pub ts: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub missed_events: ::std::os::raw::c_longlong,
    pub record_size: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub cpu: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub locked: ::std::os::raw::c_int,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tep_record() {
    assert_eq!(
        ::std::mem::size_of::<tep_record>(),
        64usize,
        concat!("Size of: ", stringify!(tep_record))
    );
    assert_eq!(
        ::std::mem::align_of::<tep_record>(),
        8usize,
        concat!("Alignment of ", stringify!(tep_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).ts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).missed_events as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(missed_events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).record_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(record_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).cpu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).ref_count as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).locked as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_record>())).priv_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_record),
            "::",
            stringify!(priv_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_handle {
    _unused: [u8; 0],
}
pub type tep_event_handler_func = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut trace_seq,
        record: *mut tep_record,
        event: *mut tep_event,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_format_field {
    pub next: *mut tep_format_field,
    pub event: *mut tep_event,
    pub type_: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub arraylen: ::std::os::raw::c_uint,
    pub elementsize: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_tep_format_field() {
    assert_eq!(
        ::std::mem::size_of::<tep_format_field>(),
        64usize,
        concat!("Size of: ", stringify!(tep_format_field))
    );
    assert_eq!(
        ::std::mem::align_of::<tep_format_field>(),
        8usize,
        concat!("Alignment of ", stringify!(tep_format_field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).event as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).alias as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).arraylen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(arraylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).elementsize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(elementsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format_field>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format_field),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_format {
    pub nr_common: ::std::os::raw::c_int,
    pub nr_fields: ::std::os::raw::c_int,
    pub common_fields: *mut tep_format_field,
    pub fields: *mut tep_format_field,
}
#[test]
fn bindgen_test_layout_tep_format() {
    assert_eq!(
        ::std::mem::size_of::<tep_format>(),
        24usize,
        concat!("Size of: ", stringify!(tep_format))
    );
    assert_eq!(
        ::std::mem::align_of::<tep_format>(),
        8usize,
        concat!("Alignment of ", stringify!(tep_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format>())).nr_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format),
            "::",
            stringify!(nr_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format>())).nr_fields as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format),
            "::",
            stringify!(nr_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format>())).common_fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format),
            "::",
            stringify!(common_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_format>())).fields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_format),
            "::",
            stringify!(fields)
        )
    );
}
pub const tep_print_arg_type_TEP_PRINT_NULL: tep_print_arg_type = 0;
pub const tep_print_arg_type_TEP_PRINT_ATOM: tep_print_arg_type = 1;
pub const tep_print_arg_type_TEP_PRINT_FIELD: tep_print_arg_type = 2;
pub const tep_print_arg_type_TEP_PRINT_FLAGS: tep_print_arg_type = 3;
pub const tep_print_arg_type_TEP_PRINT_SYMBOL: tep_print_arg_type = 4;
pub const tep_print_arg_type_TEP_PRINT_HEX: tep_print_arg_type = 5;
pub const tep_print_arg_type_TEP_PRINT_INT_ARRAY: tep_print_arg_type = 6;
pub const tep_print_arg_type_TEP_PRINT_TYPE: tep_print_arg_type = 7;
pub const tep_print_arg_type_TEP_PRINT_STRING: tep_print_arg_type = 8;
pub const tep_print_arg_type_TEP_PRINT_BSTRING: tep_print_arg_type = 9;
pub const tep_print_arg_type_TEP_PRINT_DYNAMIC_ARRAY: tep_print_arg_type = 10;
pub const tep_print_arg_type_TEP_PRINT_OP: tep_print_arg_type = 11;
pub const tep_print_arg_type_TEP_PRINT_FUNC: tep_print_arg_type = 12;
pub const tep_print_arg_type_TEP_PRINT_BITMASK: tep_print_arg_type = 13;
pub const tep_print_arg_type_TEP_PRINT_DYNAMIC_ARRAY_LEN: tep_print_arg_type = 14;
pub const tep_print_arg_type_TEP_PRINT_HEX_STR: tep_print_arg_type = 15;
pub type tep_print_arg_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tep_print_arg {
    pub next: *mut tep_print_arg,
    pub type_: tep_print_arg_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_parse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_fmt {
    pub format: *mut ::std::os::raw::c_char,
    pub args: *mut tep_print_arg,
    pub print_cache: *mut tep_print_parse,
}
#[test]
fn bindgen_test_layout_tep_print_fmt() {
    assert_eq!(
        ::std::mem::size_of::<tep_print_fmt>(),
        24usize,
        concat!("Size of: ", stringify!(tep_print_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<tep_print_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(tep_print_fmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_print_fmt>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_print_fmt),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_print_fmt>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_print_fmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_print_fmt>())).print_cache as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_print_fmt),
            "::",
            stringify!(print_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_event {
    pub tep: *mut tep_handle,
    pub name: *mut ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub format: tep_format,
    pub print_fmt: tep_print_fmt,
    pub system: *mut ::std::os::raw::c_char,
    pub handler: tep_event_handler_func,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tep_event() {
    assert_eq!(
        ::std::mem::size_of::<tep_event>(),
        96usize,
        concat!("Size of: ", stringify!(tep_event))
    );
    assert_eq!(
        ::std::mem::align_of::<tep_event>(),
        8usize,
        concat!("Alignment of ", stringify!(tep_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).tep as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(tep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).print_fmt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(print_fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).system as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).handler as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tep_event>())).context as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tep_event),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_instance {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracefs_instance_create(name: *const ::std::os::raw::c_char) -> *mut tracefs_instance;
}
extern "C" {
    pub fn tracefs_instance_destroy(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_file_write(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracecmd_input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracecmd_count_cpus() -> ::std::os::raw::c_int;
}
pub const event_type_WAKEUP: event_type = 0;
pub const event_type_SWITCH: event_type = 1;
pub const event_type_EXIT: event_type = 2;
pub type event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rbftrace_event {
    pub typ: event_type,
    pub ts: ::std::os::raw::c_ulonglong,
    pub pid: pid_t,
    pub prio: ::std::os::raw::c_int,
    pub prev_state: ::std::os::raw::c_long,
    pub next_pid: pid_t,
    pub next_prio: ::std::os::raw::c_int,
    pub success: ::std::os::raw::c_int,
    pub target_cpu: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rbftrace_event() {
    assert_eq!(
        ::std::mem::size_of::<rbftrace_event>(),
        48usize,
        concat!("Size of: ", stringify!(rbftrace_event))
    );
    assert_eq!(
        ::std::mem::align_of::<rbftrace_event>(),
        8usize,
        concat!("Alignment of ", stringify!(rbftrace_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).typ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).ts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).prio as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).prev_state as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(prev_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).next_pid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(next_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).next_prio as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(next_prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).success as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(success)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rbftrace_event>())).target_cpu as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rbftrace_event),
            "::",
            stringify!(target_cpu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct recorder_data {
    pub pid: ::std::os::raw::c_int,
    pub event_pipe: [::std::os::raw::c_int; 2usize],
    pub cpu: ::std::os::raw::c_int,
    pub closed: ::std::os::raw::c_int,
    pub stream: *mut tracecmd_input,
    pub record: *mut tep_record,
}
#[test]
fn bindgen_test_layout_recorder_data() {
    assert_eq!(
        ::std::mem::size_of::<recorder_data>(),
        40usize,
        concat!("Size of: ", stringify!(recorder_data))
    );
    assert_eq!(
        ::std::mem::align_of::<recorder_data>(),
        8usize,
        concat!("Alignment of ", stringify!(recorder_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).event_pipe as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(event_pipe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).cpu as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).closed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(closed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).stream as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recorder_data>())).record as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(recorder_data),
            "::",
            stringify!(record)
        )
    );
}
extern "C" {
    pub fn create_recorders(
        tracefs: *mut tracefs_instance,
        cpu_cnt: ::std::os::raw::c_int,
    ) -> *mut recorder_data;
}
extern "C" {
    pub fn create_recorder(
        cpu: ::std::os::raw::c_int,
        event_pipe: *mut ::std::os::raw::c_int,
        tracefs_path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stop_threads(recorders: *mut recorder_data, cpu_cnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wait_threads(recorders: *mut recorder_data, cpu_cnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn my_test_2();
}
extern "C" {
    pub fn parse_event_rbftrace(
        source: *mut tep_event,
        target: *mut rbftrace_event,
        record: *mut tep_record,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_stream(
        read_fd: ::std::os::raw::c_int,
        cpu: ::std::os::raw::c_int,
        cpu_cnt: ::std::os::raw::c_int,
    ) -> *mut tracecmd_input;
}
extern "C" {
    pub fn read_stream(
        recorders: *mut recorder_data,
        cpu_cnt: ::std::os::raw::c_int,
        rbf_event: *mut rbftrace_event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_event(event: *mut rbftrace_event);
}
extern "C" {
    pub fn my_test();
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_dfa_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffer_instance {
    pub _address: u8,
}
